
name: Test Action Context

on:
  ## Some of these will only fire on the `default` branch
  push:
    branches:
      - master
  release:
  issues:
  issue_comment:

jobs:
  dump-context:
    runs-on: ubuntu-latest
    
    steps:
    
      - name: checkout
        uses: actions/checkout@v1

      - name: get action context
        shell: pwsh
        run: |
            Import-Module ./GitHubActions

            $context = Get-ActionContext -Verbose

            ## A context object is immutable, so we make a copy through JSON
            ## ser/deser for the purpose of nulling out the Payload which is
            ## very deep and complex on its own so we remove it from the first
            ## dump of context for clarity and then we'll dump just the payload
            $contextJson = $context | ConvertTo-Json -Depth 7
            $contextHash = $contextJson | ConvertFrom-Json -AsHashtable
            $contextHash.Payload = "(-OMITTED-)"

            Write-Host '##########################################################'
            Write-Host 'Resolved [context] WITHOUT Payload as:'
            Write-Host (ConvertTo-Json -Depth 7 $contextHash)

            $repo = Get-ActionRepo -Verbose
            Write-Host '##########################################################'
            Write-Host 'Resolved [repo] as:'
            Write-Host (ConvertTo-Json -Depth 7 $repo)
            
            $issue = Get-ActionIssue -Verbose
            Write-Host '##########################################################'
            Write-Host 'Resolved [issue] as:'
            Write-Host (ConvertTo-Json -Depth 7 $issue)

            Write-Host '##########################################################'
            Write-Host 'Resolved [context.Payload] as:'
            Write-Host (ConvertTo-Json -Depth 7 $context.Payload)

      - name: try docs example
        shell: pwsh
        run: |
          Import-Module ./GitHubActions

          $context = Get-ActionContext
          if ($context.EventName -eq 'push') {
              $payload = $context.Payload
              Write-ActionInfo "The head commit is: $($payload.head_commit | ConvertTo-Json)"
          }

      - name: test GH env files - 0 - read env vars before
        shell: pwsh
        run: |
          Import-Module ./GitHubActions

          $ghEnv = $env:GITHUB_ENV
          $ghPath = $env:GITHUB_PATH
          $pathVar  = $env:path
          $testVar1 = $env:TEST_VAR1
          $testVar2 = $env:TEST_VAR2

          Write-ActionInfo "Read in GH ENV Paths:"
          Write-ActionInfo " * ghEnv  = [$ghEnv]"
          Write-ActionInfo " * ghPath = [$ghPath]"

          Write-ActionInfo "Read in GH ENV Files:"
          Write-ActionInfo " * ghEnv  = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghEnv)]"
          Write-ActionInfo " * ghPath = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghPath)]"

          Write-ActionInfo "Read in Test ENV Vars:"
          Write-ActionInfo "  * path      = [$pathVar]:"
          Write-ActionInfo "  * TEST_VAR1 = [$testVar1]:"
          Write-ActionInfo "  * TEST_VAR2 = [$testVar2]:"

      - name: test GH env files - 1 - set env vars
        shell: pwsh
        run: |
          Import-Module ./GitHubActions

          Write-ActionInfo "**BEFORE** SETTING VALUES:"
          Write-ActionInfo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          $ghEnv = $env:GITHUB_ENV
          $ghPath = $env:GITHUB_PATH
          $pathVar  = $env:path
          $testVar1 = $env:TEST_VAR1
          $testVar2 = $env:TEST_VAR2

          Write-ActionInfo "Read in GH ENV Paths:"
          Write-ActionInfo " * ghEnv  = [$ghEnv]"
          Write-ActionInfo " * ghPath = [$ghPath]"

          Write-ActionInfo "Read in GH ENV Files:"
          Write-ActionInfo " * ghEnv  = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghEnv)]"
          Write-ActionInfo " * ghPath = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghPath)]"

          Write-ActionInfo "Read in Test ENV Vars:"
          Write-ActionInfo "  * path      = [$pathVar]:"
          Write-ActionInfo "  * TEST_VAR1 = [$testVar1]:"
          Write-ActionInfo "  * TEST_VAR2 = [$testVar2]:"

          Write-ActionInfo "**SETTING** VALUES:"
          Write-ActionInfo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          Add-ActionPath -Path '/tmp/no/such/path'
          Set-ActionVariable -Name "TEST_VAR1" -Value "Test Value 1"
          Set-ActionVariable -Name "TEST_VAR2" -Value "Test Value 2`nSecond Line`nThird Line"

          Write-ActionInfo "**AFTER** SETTING VALUES:"
          Write-ActionInfo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

          $ghEnv = $env:GITHUB_ENV
          $ghPath = $env:GITHUB_PATH
          $pathVar  = $env:path
          $testVar1 = $env:TEST_VAR1
          $testVar2 = $env:TEST_VAR2

          Write-ActionInfo "Read in GH ENV Paths:"
          Write-ActionInfo " * ghEnv  = [$ghEnv]"
          Write-ActionInfo " * ghPath = [$ghPath]"

          Write-ActionInfo "Read in GH ENV Files:"
          Write-ActionInfo " * ghEnv  = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghEnv)]"
          Write-ActionInfo " * ghPath = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghPath)]"

          Write-ActionInfo "Read in Test ENV Vars:"
          Write-ActionInfo "  * path      = [$pathVar]:"
          Write-ActionInfo "  * TEST_VAR1 = [$testVar1]:"
          Write-ActionInfo "  * TEST_VAR2 = [$testVar2]:"

      - name: test GH env files - 2 - read env vars after
        shell: pwsh
        run: |
          Import-Module ./GitHubActions

          $ghEnv = $env:GITHUB_ENV
          $ghPath = $env:GITHUB_PATH
          $pathVar  = $env:path
          $testVar1 = $env:TEST_VAR1
          $testVar2 = $env:TEST_VAR2

          Write-ActionInfo "Read in GH ENV Paths:"
          Write-ActionInfo " * ghEnv  = [$ghEnv]"
          Write-ActionInfo " * ghPath = [$ghPath]"

          Write-ActionInfo "Read in GH ENV Files:"
          Write-ActionInfo " * ghEnv  = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghEnv)]"
          Write-ActionInfo " * ghPath = [$(Get-Content -Raw -ErrorAction SilentlyContinue $ghPath)]"

          Write-ActionInfo "Read in Test ENV Vars:"
          Write-ActionInfo "  * path      = [$pathVar]:"
          Write-ActionInfo "  * TEST_VAR1 = [$testVar1]:"
          Write-ActionInfo "  * TEST_VAR2 = [$testVar2]:"
