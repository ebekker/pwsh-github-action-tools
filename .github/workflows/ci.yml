
name: CI

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: published

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    
      - name: checkout
        uses: actions/checkout@v1

      - name: extract version base
        id: extract_version_base
        shell: pwsh
        run: |
          $mm = Test-ModuleManifest -Path ./GitHubActions/GitHubActions.psd1
          $mv = $mm.Version
          Write-Output "Got module manifest version: $mv"

          $versionBase = "$($mv.Major).$($mv.Minor).$($mv.Build)"
          Write-Output "Computed version base: $versionBase"
          Write-Host "::set-output name=version_base::$versionBase"
          Write-Host "::set-env name=VERSION_BASE::$versionBase"

      - name: compute build nums
        uses: zyborg/gh-action-buildnum@v1
        with:
          gist_token: ${{ secrets.GIST_TOKEN }}
          version_key: ${{ steps.extract_version_base.outputs.version_base }}
          set_env: true

      - name: update version build
        shell: pwsh
        run: |
          $versBase = $env:VERSION_BASE
          $buildNum = $env:BUILDNUM_FOR_VERSION
          $versFull = "$($versBase).$($buildNum)"

          Write-Output "Computed full version: $versFull"
          Update-ModuleManifest -Path ./GitHubActions/GitHubActions.psd1 -ModuleVersion $versFull

          ## Pull it back out to verify it was updated
          $mm = Test-ModuleManifest -Path ./GitHubActions/GitHubActions.psd1
          Write-Output "Updated module manifest with version: $($mm.Version)"

      ## We have to run the Pester tests manually because the `pester-tests-report` Action
      ## actually uses our GitHubActions module internally, and produces a conflict due to
      ## multiple same-named module scripts when the Action tries to run our tests itself
      - name: pester tests manually
        id: pesterTests
        shell: pwsh
        run: |
          $modulesToInstall = @(
            'Pester'
            'functional'
          )
          $modulesToInstall | ForEach-Object {
            if (-not (Get-Module -ListAvailable -All $_)) {
              Write-Output "Module [$_] not found, INSTALLING..."
              Install-Module $_ -Force
            }
          }

          Import-Module Pester
          Import-Module ./GitHubActions

          $test_results_dir = Join-Path $PWD _TMP
          $test_results_path = Join-Path $test_results_dir test-results.nunit.xml
          $result_clixml_path = Join-Path $test_results_dir pester-result.xml

          if (-not (Test-Path $test_results_dir)) {
            mkdir $test_results_dir
          }

          $pesterResult = Invoke-Pester -PassThru -OutputFile $test_results_path -Path tests
          Export-Clixml -InputObject $pesterResult -Path $result_clixml_path

          Set-ActionOutput -Name test_results_path -Value $test_results_path
          Set-ActionOutput -Name result_clixml_path -Value $result_clixml_path

      - name: pester tests report
        uses: zyborg/pester-tests-report@v1.3.0
        with:
          test_results_path: ${{ steps.pesterTests.outputs.test_results_path }}
          result_clixml_path: ${{ steps.pesterTests.outputs.result_clixml_path }}
          report_name: action_tools_tests
          report_title: PWSH GitHub Action Tools Tests
          gist_name: pwsh-github-action-tools_tests.md
          github_token: ${{ secrets.GITHUB_TOKEN }}
          gist_token: ${{ secrets.GIST_TOKEN }}
          gist_badge_label: 'Tested @ %ExecutedAt%'

      - name: publish to myget
        shell: pwsh
        env:
          MYGET_NUGET_API_KEY: ${{ secrets.MYGET_NUGET_API_KEY }}
        run: |
          $nugetApiKey   = $env:MYGET_NUGET_API_KEY
          $nugetApiKeySS = ConvertTo-SecureString $nugetApiKey -AsPlainText
          $nugetCred     = [pscredential]::new('ignored', $nugetApiKeySS)
          Register-PSRepository -Name myget -Credential $nugetCred `
            -SourceLocation https://www.myget.org/F/pwsh-github-action-tools/api/v2 `
            -PublishLocation https://www.myget.org/F/pwsh-github-action-tools/api/v2/package
          
          Publish-Module -Path ./GitHubActions -Repository myget -NuGetApiKey $nugetApiKey

      - name: upload artifact
        #if: startsWith(github.ref, 'refs/tags/v=')
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v1
        with:
          name: GitHubActions
          path: ./GitHubActions

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:

      - name: download distributable artifact
        uses: actions/download-artifact@v1
        with:
          name: GitHubActions
      
      - name: bundle distributable components
        shell: pwsh
        run: |
          cd GitHubActions
          Compress-Archive -DestinationPath ../GitHubActions.zip -Path ./*

      - name: publish to powershell gallery
        shell: pwsh
        env:
          PSGALLERY_NUGET_API_KEY: ${{ secrets.PSGALLERY_NUGET_API_KEY }}
        run: |
          $nugetApiKey   = $env:PSGALLERY_NUGET_API_KEY
          Publish-Module -Path ./GitHubActions -NuGetApiKey $nugetApiKey

      - name: attach asset to release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $tagName = $env:GITHUB_REF -replace 'refs/tags/',''
          $githubHeaders = @{ Authorization = "token $($env:GITHUB_TOKEN)" }
          $githubRepo = $env:GITHUB_REPOSITORY
          $listRelsUrl = "https://api.github.com/repos/$($githubRepo)/releases"
          $listRelsResp = Invoke-WebRequest -Headers $githubHeaders $listRelsUrl
          
          $listRels = $listRelsResp.Content | ConvertFrom-Json
          if (-not ($listRels.Count)) {
            throw "list releases response did not resolve to any releases"
          }
          else {
            Write-Output "Found [$($listRels.Count)] release(s)."
          }
          $thisRel = $listRels | Where-Object { $_.tag_name -eq $tagName }
          if (-not $thisRel) {
            throw "could not find release for tag [$tagName]"
          }
          else {
            Write-Output "Found release [$($thisRel.tag_name)][$($thisRel.url)]"
          }
          $uploadUrl = $thisRel.upload_url.Replace(
            '{?name,label}','?name=GitHubActions.zip')
          $uploadHeaders = @{
            "Authorization" = "token $($env:GITHUB_TOKEN)"
            "Content-Type" = "application/zip"
          }
          Write-Output "Adding asset to [$uploadUrl]"
          $uploadResp = Invoke-WebRequest -Headers $uploadHeaders $uploadUrl `
            -InFile GitHubActions.zip
